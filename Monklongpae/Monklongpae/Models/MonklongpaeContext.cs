// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace Monklongpae.Models
{
    public partial class MonklongpaeContext : DbContext
    {
        public MonklongpaeContext()
        {
        }

        public MonklongpaeContext(DbContextOptions<MonklongpaeContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Account> Account { get; set; }
        public virtual DbSet<Catory> Catory { get; set; }
        public virtual DbSet<Contact> Contact { get; set; }
        public virtual DbSet<History> History { get; set; }
        public virtual DbSet<Market> Market { get; set; }
        public virtual DbSet<NameVideo> NameVideo { get; set; }
        public virtual DbSet<Packet> Packet { get; set; }
        public virtual DbSet<PageMessage> PageMessage { get; set; }
        public virtual DbSet<Payment> Payment { get; set; }
        public virtual DbSet<Role> Role { get; set; }
        public virtual DbSet<User> User { get; set; }
        public virtual DbSet<Video> Video { get; set; }
        public virtual DbSet<VideoPage> VideoPage { get; set; }

        public IConfiguration GetConfiguration()
        {
            var builder = new ConfigurationBuilder().SetBasePath(Directory.GetCurrentDirectory()).AddJsonFile("appsettings.json", optional: true, reloadOnChange: true);
            return builder.Build();
        }


        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                var configuration = GetConfiguration();
                string con = configuration.GetSection("ConnectionStrings:DefaultConnection").Value;
                if (!optionsBuilder.IsConfigured)
                {
                    optionsBuilder.UseSqlServer(con);
                }
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasDefaultSchema("Monklongpae");

            modelBuilder.Entity<Account>(entity =>
            {
                entity.HasKey(e => e.IdAccount);

                entity.ToTable("account", "dbo");

                entity.Property(e => e.IdAccount).HasColumnName("id_account");

                entity.Property(e => e.Account1)
                    .HasMaxLength(50)
                    .HasColumnName("account");

                entity.Property(e => e.AccountStatus).HasColumnName("account_status");

                entity.Property(e => e.NameAccout)
                    .HasMaxLength(100)
                    .HasColumnName("name_accout");
            });

            modelBuilder.Entity<Catory>(entity =>
            {
                entity.HasKey(e => e.IdCatory);

                entity.ToTable("catory", "dbo");

                entity.Property(e => e.IdCatory).HasColumnName("id_catory");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasColumnName("create_date");

                entity.Property(e => e.Name)
                    .HasMaxLength(50)
                    .HasColumnName("name");

                entity.Property(e => e.UpdateDate)
                    .HasColumnType("datetime")
                    .HasColumnName("update_date");
            });

            modelBuilder.Entity<Contact>(entity =>
            {
                entity.HasKey(e => e.IdContact);

                entity.ToTable("contact", "dbo");

                entity.Property(e => e.IdContact).HasColumnName("id_contact");

                entity.Property(e => e.Address)
                    .HasMaxLength(50)
                    .HasColumnName("address");

                entity.Property(e => e.Map).HasColumnName("map");

                entity.Property(e => e.Tel)
                    .HasMaxLength(50)
                    .HasColumnName("tel");
            });

            modelBuilder.Entity<History>(entity =>
            {
                entity.HasKey(e => e.IdHistory);

                entity.ToTable("history", "dbo");

                entity.Property(e => e.IdHistory).HasColumnName("id_history");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasColumnName("create_date");

                entity.Property(e => e.IdUser).HasColumnName("id_user");

                entity.Property(e => e.IdVideo).HasColumnName("id_video");
            });

            modelBuilder.Entity<Market>(entity =>
            {
                entity.HasKey(e => e.IdMarket);

                entity.ToTable("market");

                entity.Property(e => e.IdMarket).HasColumnName("id_market");

                entity.Property(e => e.CreateAt)
                    .HasColumnType("datetime")
                    .HasColumnName("create_at");

                entity.Property(e => e.Duration).HasColumnName("duration");

                entity.Property(e => e.IdVideo).HasColumnName("id_video");

                entity.Property(e => e.PartImage)
                    .HasColumnType("text")
                    .HasColumnName("part_image");

                entity.Property(e => e.Showtime).HasColumnName("showtime");

                entity.Property(e => e.Url)
                    .HasColumnType("text")
                    .HasColumnName("url");
            });

            modelBuilder.Entity<NameVideo>(entity =>
            {
                entity.HasKey(e => e.IdNameVideo);

                entity.ToTable("name_video", "dbo");

                entity.Property(e => e.IdNameVideo).HasColumnName("id_name_video");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasColumnName("create_date");

                entity.Property(e => e.IdCatory).HasColumnName("id_catory");

                entity.Property(e => e.Name)
                    .HasMaxLength(50)
                    .HasColumnName("name");

                entity.Property(e => e.PathDisplay).HasColumnName("path_display");
            });

            modelBuilder.Entity<Packet>(entity =>
            {
                entity.HasKey(e => e.IdPacket);

                entity.ToTable("packet", "dbo");

                entity.Property(e => e.IdPacket).HasColumnName("id_packet");

                entity.Property(e => e.Day)
                    .HasMaxLength(255)
                    .HasColumnName("day");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .HasColumnName("description");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .HasColumnName("name");

                entity.Property(e => e.Price).HasColumnName("price");

                entity.Property(e => e.Status)
                    .HasMaxLength(255)
                    .HasColumnName("status");
            });

            modelBuilder.Entity<PageMessage>(entity =>
            {
                entity.HasKey(e => e.IdPage);

                entity.ToTable("page_message", "dbo");

                entity.Property(e => e.IdPage).HasColumnName("id_page");

                entity.Property(e => e.MessagePage1En)
                    .HasMaxLength(100)
                    .HasColumnName("message_page1_en");

                entity.Property(e => e.MessagePage1Th)
                    .HasMaxLength(100)
                    .HasColumnName("message_page1_th");

                entity.Property(e => e.MessagePage2En)
                    .HasMaxLength(100)
                    .HasColumnName("message_page2_en");

                entity.Property(e => e.MessagePage2Th)
                    .HasMaxLength(100)
                    .HasColumnName("message_page2_th");

                entity.Property(e => e.MessagePage3En)
                    .HasMaxLength(100)
                    .HasColumnName("message_page3_en");

                entity.Property(e => e.MessagePage3Th)
                    .HasMaxLength(100)
                    .HasColumnName("message_page3_th");

                entity.Property(e => e.MessagePage4En)
                    .HasMaxLength(100)
                    .HasColumnName("message_page4_en");

                entity.Property(e => e.MessagePage4Th)
                    .HasMaxLength(100)
                    .HasColumnName("message_page4_th");
            });

            modelBuilder.Entity<Payment>(entity =>
            {
                entity.HasKey(e => e.IdPayment);

                entity.ToTable("payment", "dbo");

                entity.Property(e => e.IdPayment).HasColumnName("id_payment");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasColumnName("create_date");

                entity.Property(e => e.FilePayment).HasColumnName("file_payment");

                entity.Property(e => e.IdPacket).HasColumnName("id_packet");

                entity.Property(e => e.IdUser).HasColumnName("id_user");

                entity.Property(e => e.Isactive).HasColumnName("isactive");

                entity.Property(e => e.Status)
                    .HasMaxLength(50)
                    .HasColumnName("status");

                entity.Property(e => e.UpdateDate)
                    .HasColumnType("datetime")
                    .HasColumnName("update_date");
            });

            modelBuilder.Entity<Role>(entity =>
            {
                entity.HasKey(e => e.IdRole);

                entity.ToTable("role", "dbo");

                entity.Property(e => e.IdRole).HasColumnName("id_role");

                entity.Property(e => e.Name)
                    .HasMaxLength(50)
                    .HasColumnName("name");
            });

            modelBuilder.Entity<User>(entity =>
            {
                entity.HasKey(e => e.IdUser);

                entity.ToTable("user", "dbo");

                entity.Property(e => e.IdUser).HasColumnName("id_user");

                entity.Property(e => e.Address)
                    .HasMaxLength(255)
                    .HasColumnName("address");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasColumnName("create_date");

                entity.Property(e => e.FirstName)
                    .HasMaxLength(100)
                    .HasColumnName("first_name");

                entity.Property(e => e.IdRole).HasColumnName("id_role");

                entity.Property(e => e.ImagePath)
                    .HasMaxLength(255)
                    .HasColumnName("image_path");

                entity.Property(e => e.Isactive).HasColumnName("isactive");

                entity.Property(e => e.MacAddress)
                    .HasMaxLength(100)
                    .HasColumnName("macAddress");

                entity.Property(e => e.OnlineStatus).HasColumnName("online_status");

                entity.Property(e => e.PacketDateLimit)
                    .HasColumnType("datetime")
                    .HasColumnName("packet_date_limit");

                entity.Property(e => e.Password)
                    .HasMaxLength(255)
                    .HasColumnName("password");

                entity.Property(e => e.SurName)
                    .HasMaxLength(100)
                    .HasColumnName("sur_name");

                entity.Property(e => e.Tel)
                    .HasMaxLength(50)
                    .HasColumnName("tel");

                entity.Property(e => e.Token).HasColumnName("token");

                entity.Property(e => e.UpdateDate)
                    .HasColumnType("datetime")
                    .HasColumnName("update_date");

                entity.Property(e => e.WorkDate)
                    .HasColumnType("datetime")
                    .HasColumnName("work_date");
            });

            modelBuilder.Entity<Video>(entity =>
            {
                entity.HasKey(e => e.IdVideo);

                entity.ToTable("video", "dbo");

                entity.Property(e => e.IdVideo).HasColumnName("id_video");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasColumnName("create_date");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .HasColumnName("description");

                entity.Property(e => e.IdNameVideo).HasColumnName("id_name_video");

                entity.Property(e => e.LimitVideoUser).HasColumnName("limit_video_user");

                entity.Property(e => e.Name)
                    .HasMaxLength(100)
                    .HasColumnName("name");

                entity.Property(e => e.PathDisplay).HasColumnName("path_display");

                entity.Property(e => e.PathVideo).HasColumnName("path_video");

                entity.Property(e => e.TimeVideo)
                    .HasMaxLength(50)
                    .HasColumnName("time_video");

                entity.Property(e => e.Views).HasColumnName("views");
            });

            modelBuilder.Entity<VideoPage>(entity =>
            {
                entity.HasKey(e => e.IdVideoPage);

                entity.ToTable("video_page", "dbo");

                entity.Property(e => e.IdVideoPage).HasColumnName("id_video_page");

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.Path).HasColumnName("path");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}